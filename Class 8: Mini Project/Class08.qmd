---
title: "Class 8 mini project"
author: "Destiny (A16340362)"
format: pdf
---


```{r}
# Save your input data file into your Project directory

wisc.df <- read.csv("WisconsinCancer.csv", row.names = 1)
wisc.data <- wisc.df[,-1]

```
Now we'll store the diagnostics column for later and exclude it from the data set that I will actually do things with that I will call `wisc.data`

```{r}
diagnosis <-as.factor(wisc.df$diagnosis)
wisc.data <- wisc.df[,-1]
```

>Q1. How many observations are in this dataset?

```{r}
nrow(wisc.df)
```
>Q2. How many of the observations have a malignant diagnosis?

```{r}
table(wisc.df$diagnosis)
```
>Q3. How many variables/features in the data are suffixed with _mean?

```{r}
x <- colnames(wisc.df)
 grep("_mean", x, fixed = TRUE) 
length(grep("_mean", x, fixed = TRUE))
```
# Principal Component Analysis
We need to sclae our input data before PCA as some of the columns are measured in terms of very different unites with different means and different variances. The upshot here is that we set `scale-TRUE` to agrument `prcomp()` Scaling basicaly helps to normalize the data since each piece of the data is scaled extremly different 

```{r}
# Check column means and standard deviations
colMeans(wisc.data)
apply(wisc.data,2,sd)
```

```{r}
# Perform PCA on wisc.data by completing the following code
wisc.pr <- prcomp( wisc.data, scale=TRUE )
summary(wisc.pr)

```

```{r}
plot(wisc.pr$x[,1], wisc.pr$x[,2], col=diagnosis)
```


>Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?
0.4427

>Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?
PC1 through PC3 so need 3 componets


>Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?
PC 1 through PC 7 so need at least 7 components 

>Q7. What stands out to you about this plot? Is it easy or difficult to understand? Why?
This plot is extremly clumped together and difficult to read and understand since the data isn't spread out. 

```{r}
biplot(wisc.pr)

```

```{r}
# Scatter plot observations by components 1 and 2
plot( wisc.pr$x , col = diagnosis , 
     xlab = "PC1", ylab = "PC2")
```

>Q8. Generate a similar plot for principal components 1 and 3. What do you notice about these plots?

```{r}
# Repeat for components 1 and 3
plot(wisc.pr$x[, 1:2 ],  col = diagnosis, 
     xlab = "PC1", ylab = "PC3")

```


```{r}
# Create a data.frame for ggplot
df <- as.data.frame(wisc.pr$x)
df$diagnosis <- diagnosis

# Load the ggplot2 package
library(ggplot2)

# Make a scatter plot colored by diagnosis
ggplot(df) + 
  aes(PC1, PC2, col=diagnosis) + 
  geom_point()
```

```{r}
# Calculate variance of each component
pr.var <- wisc.pr$sdev^2
head(pr.var)
```


```{r}
# Variance explained by each principal component: pve
pve <- pr.var/sum(pr.var) 

# Plot variance explained for each principal component
plot(pve, xlab = "Principal Component", 
     ylab = "Proportion of Variance Explained", 
     ylim = c(0, 1), type = "o")
```

```{r}
# Alternative scree plot of the same data, note data driven y-axis
barplot(pve, ylab = "Precent of Variance Explained",
     names.arg=paste0("PC",1:length(pve)), las=2, axes = FALSE)
axis(2, at=pve, labels=round(pve,2)*100 )
```

##Communicating PCA results
>Q9. For the first principal component, what is the component of the loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean?

```{r}
wisc.pr$rotation["concave.points_mean",1]

```


>Q10. What is the minimum number of principal components required to explain 80% of the variance of the data?
It would need 5 PC


##Heirachical clustering

Can we just use custering on the orginal data and get some insgiht into M vs B

It's rather diffuclt, this "tree" look like a hot mess
```{r}
#distance matrix needed for hclust
data.dist <- dist(scale(wisc.data))

wisc.hclust <- hclust(data.dist)
plot(wisc.hclust)
```

>Q11. Using the plot() and abline() functions, what is the height at which the clustering model has 4 clusters?

```{r}
wisc.hclust <- hclust(data.dist)
plot(wisc.hclust)
abline(h=19, col="red", lty=2)
```

```{r}
wisc.hclust.clusters <- cutree(wisc.hclust, k=4)
table(wisc.hclust.clusters, diagnosis)
```
>Q12. Can you find a better cluster vs diagnoses match by cutting into a different number of clusters between 2 and 10?

The better matches for the cuttung into the number of clusters is at lower numbers since the B and M clusters tend to be grouped or clustered more together, whereas with cutting into 4 clusters it's more spread out and not clumped together 

```{r}
wisc.hclust.clusters <- cutree(wisc.hclust, k=2)
table(wisc.hclust.clusters, diagnosis)
```


>Q13. Which method gives your favorite results for the same data.dist dataset? Explain your reasoning.

Using ward.D2 gives the best results with that dataset because minimizes the amount of variance between the clusters so things look a bit more neat and organized.

```{r}
method="ward.D2"
```


##Combine 5
This approach will take not the orignal data, but out PCA results and work with them

```{r}
d <- dist(wisc.pr$x[, 1:3])
wisc.pr.hclust <- hclust(d, method="ward.D2")
plot(wisc.pr.hclust)
```

Generate 2 cluster groups from this hclust object 
```{r}
grps <- cutree(wisc.pr.hclust, k=2)
grps 
```

```{r}
 plot(wisc.pr$x[,1:2], col=grps)
```


>Q15. How well does the newly created model with four clusters separate out the two diagnoses?

The newly created model is pretty good with the separation of the two diagnosis because the way the B and M are split in a pretty even manner. 

```{r}
table(diagnosis, grps)
```

